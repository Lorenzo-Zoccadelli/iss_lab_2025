/* Generated by AN DISI Unibo */ 
package it.unibo.datacleaner

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Datacleaner ( name: String, scope: CoroutineScope, isconfined: Boolean=false, isdynamic: Boolean=false ) : 
          ActorBasicFsm( name, scope, confined=isconfined, dynamically=isdynamic ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		//IF actor.withobj !== null val actor.withobj.name» = actor.withobj.method»ENDIF
		
				val p  = Runtime.getRuntime().exec("./SonarAlone")
				val reader = BufferedReader(  InputStreamReader(p.getInputStream() ))
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="read", cond=doswitch() )
				}	 
				state("read") { //this:State
					action { //it:State
						
									var data = reader.readLine()
									println("sonarHCSR04Support data = $data"   )
									if( data != null ){
										try{ 
											val v = data.toInt()
											if(v<=150){
												val m1 = "distance( ${v*2} )"
												val event = MsgUtil.buildEvent( "sonarHCSR04Support","sonar",m1)
												emitLocalStreamEvent( event )	
											}		
											
										}catch(e: Exception){
											println("sonarHCSR04Support doRead ERROR: $e "   )
										}
									}	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_read", 
				 	 					  scope, context!!, "local_tout_"+name+"_read", 10.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t00",targetState="read",cond=whenTimeout("local_tout_"+name+"_read"))   
					transition(edgeName="t01",targetState="stopped",cond=whenDispatch("sonarstop"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t12",targetState="read",cond=whenDispatch("sonarstart"))
				}	 
			}
		}
} 
